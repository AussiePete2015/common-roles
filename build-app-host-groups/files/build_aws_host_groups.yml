# (c) 2017 DataNexus Inc.  All Rights Reserved
---
# setup the application host groups based on the defined tags appropriately
# (this includes filtering for the application role if one was provided; if a
# role was not provided then only return a list of the nodes that match but
# are **not** tagged with a Role tag)
- set_fact:
    hg_item_role: "{{host_group_item.role | default('')}}"
    match_filter:
      instance-state-name: running
      "tag:Application": "{{application}}"
      "tag:Domain": "{{domain}}"
      "tag:Project": "{{project}}"
      "tag:Tenant": "{{tenant}}"
- set_fact:
    node_list_name: "{{(hg_item_role == '') | ternary((host_group_item.name + '_nodes'), (host_group_item.name + '_' + hg_item_role + '_nodes'))}}"
    app_group_name: "{{(hg_item_role == '') | ternary(host_group_item.name,(host_group_item.name + '_' + hg_item_role))}}"
# if a role was defined, then add that field to our match_filter_dict value
- block:
  - set_fact:
      match_role_dict:
        "tag:Role": "{{hg_item_role}}"
  - set_fact:
      match_filter: "{{match_filter | combine(match_role_dict)}}"
  when: hg_item_role != ''
# then, gather the facts that are used to create our host group from the
# `ec2_remote_facts` module
- name: Gather facts for the hosts that match our filter
  ec2_remote_facts:
    region: "{{ec2_region}}"
    filters: "{{match_filter}}"
  register: matching_instances
# if a role was included in the host group item passed in, then construct a
# list of matching applications from the matching_instances output
- set_fact:
    app_nodes: "{{matching_instances.instances | map(attribute='private_ip_address') | list}}"
  when: hg_item_role != ''
# otherwise, if a role was not included in the host group item passeed in,
# filter the app_nodes list down to just the list of the matching nodes that
# do not have a role tag (of any sort) assigned to them
- block:
  - set_fact:
      match_any_role_filter:
        instance-state-name: running
        "tag:Application": "{{application}}"
        "tag:Domain": "{{domain}}"
        "tag:Project": "{{project}}"
        "tag:Tenant": "{{tenant}}"
        "tag:Role": "*"
  - name: Gather facts for the hosts that match our filter and also have a Role tag
    ec2_remote_facts:
      region: "{{ec2_region}}"
      filters: "{{match_any_role_filter}}"
    register: has_role_instances
  # construct two lists; one containing all of the nodes that matched our
  # filter and another containing nodes that have a Role tag with any value
  # in it
  - set_fact:
      matching_nodes: "{{matching_instances.instances | map(attribute='private_ip_address') | list}}"
      any_role_nodes: "{{has_role_instances.instances | map(attribute='private_ip_address') | list}}"
  # then take the difference to determine the matching nodes; store them in the
  # app_nodes list
  - set_fact:
      app_nodes: "{{matching_nodes | difference(any_role_nodes)}}"
  when: hg_item_role == ''
# set a fact containing the matching "application nodes"
- set_fact:
    "{{node_list_name}}": "{{app_nodes}}"
# and build our host group
- name: building {{app_group_name}} host group
  add_host:
    hostname: "{{item}}"
    groupname: "{{app_group_name}},{{node_list_name}}"
    ansible_ssh_private_key_file: "{{private_key_path}}/{{cloud}}-{{ec2_region}}-{{application}}-{{project}}-{{domain}}-private-key.pem"
  with_items: "{{app_nodes | default([])}}"
