# (c) 2017 DataNexus Inc.  All Rights Reserved
---
# if this is an OpenStack cloud, then set the facts for the application nodes
# appropriately (this includes filtering for the application role if one
# was provided; if a role was not provided then only return a list of the
# nodes that match but are **not** tagged with a Role tag)
- set_fact:
    hg_item_role: "{{host_group_item.role | default('')}}"
    hg_item_name: "{{host_group_item.name}}"
# set the facts for the application nodes appropriately (this includes
# filtering for the application role if one was provided
- set_fact:
    application_nodes: "{{(di_output_json | json_query('[\"meta-Application_' + hg_item_name + '\"]')).0}}"
- set_fact:
    app_nodes: "{{cloud_nodes | intersect(tenant_nodes) | intersect(project_nodes) | intersect(domain_nodes) | intersect(application_nodes)}}"
# if a role was defined as part of this host group item, then run the
# tasks this block
- block:
  # use the input role tag to get the list of all of the nodes that were
  # tagged with that role using the `json_query` filter and set the name
  # we're going to use for the matching node list we're returning
  - set_fact:
      role_nodes: "{{((di_output_json | json_query('[\"meta-Role_' + hg_item_role + '\"]')).0) | default([])}}"
      node_list_name: "{{hg_item_name + '_' + hg_item_role + '_nodes'}}"
  # and use an intersection with that list of role nodes to construct the list
  # of matching app_nodes
  - set_fact:
      app_nodes: "{{app_nodes | intersect(role_nodes)}}"
  when: hg_item_role != ''
# if a role was not defined as part of this host group item, then run the
# tasks this block
- block:
  # get a list of all of the groups in the dynamic inventory di_output_json
  # string that was passed into this task file that are based on a Role tag
  # of some sort and set the name we're going to use for the matching node
  # list we're returning
  - set_fact:
      role_groups_string: "{{di_output_json | json_query('keys(@)') | select('match', 'meta-Role_*') | list | join('\", \"') }}"
      node_list_name: "{{hg_item_name + '_nodes'}}"
  # then, construct a flattened list of the nodes from the groups in the
  # `role_groups_string` we just constructed (above) and remove any nodes from
  # that list from our app_nodes list; this is done by taking the difference
  # between our `app_nodes` list and that flattened list...the result is the
  # list of all nodes match the other tags defined in this playbook run but
  # that are not tagged with a Role tag of any sort (this matches the logic
  # used when constructing these same host groups in an AWS cloud environment)
  - set_fact:
      app_nodes: "{{app_nodes | difference(di_output_json | json_query('[\"' + role_groups_string + '\"][]'))}}"
    when: role_groups_string != ''
  when: hg_item_role == ''
# now that we have our list of matching "application nodes", set a fact
# containing that list and create the appropriately named host groups
- set_fact:
    "{{node_list_name}}": "{{app_nodes}}"
    app_group_name: "{{(hg_item_role == '') | ternary(hg_item_name,(hg_item_name + '_' + hg_item_role))}}"
- name: Create {{app_group_name}} host group from OpenStack meta-data
  add_host:
    name: "{{item}}"
    groups: "{{app_group_name}},{{node_list_name}}"
    ansible_ssh_host: "{{(di_output_json | json_query('_meta.hostvars.\"' + item + '\".openstack.addresses.private[].addr') | list).0}}"
    ansible_ssh_private_key_file: "{{private_key_path}}/{{di_output_json | json_query('_meta.hostvars.\"' + item + '\".openstack.key_name')}}.pem"
  with_items: "{{app_nodes | default([])}}"
# finally, add the floating IP addresses for nodes in this application group to
# the `osp_floating_ip` list (this fact currently is not used, but it was used
# in the past so we still build it)
- name: Add floating IP addresses to osp_floating_ip for the {{app_group_name}} nodes
  set_fact:
    osp_floating_ip: "{{(osp_floating_ip | default({})) | combine({item: (di_output_json | json_query('_meta.hostvars.\"' + item + '\".openstack.addresses.public') | selectattr('OS-EXT-IPS:type', 'equalto', 'floating') | map(attribute='addr') | list).0})}}"
  with_items: "{{app_nodes | default([])}}"
