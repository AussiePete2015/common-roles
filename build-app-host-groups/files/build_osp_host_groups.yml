# (c) 2017 DataNexus Inc.  All Rights Reserved
---
# if this is an OpenStack cloud, then set the facts for the application nodes
# appropriately (this includes filtering for the application role if one
# was provided; if a role was not provided then only return a list of the
# nodes that match but are **not** tagged with a Role tag)
- set_fact:
    hg_item_role: "{{host_group_item.role | default('*')}}"
# set the facts for the application nodes appropriately (this includes
# filtering for the application role if one was provided
- set_fact:
    application_nodes: "{{(di_output_json | json_query('[\"meta-Application_' + host_group_item.name + '\"]')).0}}"
- set_fact:
    app_nodes: "{{cloud_nodes | intersect(tenant_nodes) | intersect(project_nodes) | intersect(domain_nodes) | intersect(application_nodes)}}"
    role_nodes: "{{((di_output_json | json_query('[\"meta-Role_' + hg_item_role + '\"]')).0) | default([])}}"
- set_fact:
    node_list_name: "{{host_group_item.name + '_' + hg_item_role + '_nodes'}}"
    app_nodes: "{{app_nodes | intersect(role_nodes)}}"
  when: hg_item_role != '*'
- set_fact:
    node_list_name: "{{host_group_item.name + '_nodes'}}"
    app_nodes: "{{app_nodes | difference(role_nodes)}}"
  when: hg_item_role == '*'
# and now that we have our list of "application nodes", set a fact containing that list and
# create the appropriate host group
- set_fact:
    "{{node_list_name}}": "{{app_nodes}}"
    app_group_name: "{{(hg_item_role == '*') | ternary(host_group_item.name,(host_group_item.name + '_' + hg_item_role)}}"
# this block is used to create a host group using OpenStack meta-data
- name: Create {{app_group_name}} host group from OpenStack meta-data
  add_host:
    name: "{{item}}"
    groups: "{{app_group_name}},{{node_list_name}}"
    ansible_ssh_host: "{{(di_output_json | json_query('_meta.hostvars.\"' + item + '\".openstack.addresses.private[].addr') | list).0}}"
    ansible_ssh_private_key_file: "{{private_key_path}}/{{di_output_json | json_query('_meta.hostvars.\"' + item + '\".openstack.key_name')}}.pem"
  with_items: "{{app_nodes | default([])}}"
- name: Add floating IP addresses to osp_floating_ip for the {{app_group_name}} nodes
  set_fact:
    osp_floating_ip: "{{(osp_floating_ip | default({})) | combine({item: (di_output_json | json_query('_meta.hostvars.\"' + item + '\".openstack.addresses.public') | selectattr('OS-EXT-IPS:type', 'equalto', 'floating') | map(attribute='addr') | list).0})}}"
  with_items: "{{app_nodes | default([])}}"
