# (c) 2017 DataNexus Inc.  All Rights Reserved
---
# If we're running this command for to build a cluster in AWS, then use the `ec2`
# command to gather the dynamic inventory information that we need to build our
# application host groups
- block:
  - name: Run ec2 command to gather inventory information
    local_action: "shell common-utils/inventory/aws/ec2"
    register: di_output
  - set_fact:
      di_output_json: "{{di_output.stdout | from_json}}"
  - set_fact:
      cloud_nodes: "{{di_output_json | json_query('tag_Cloud_' + cloud)}}"
      tenant_nodes: "{{di_output_json | json_query('tag_Tenant_' + tenant)}}"
      project_nodes: "{{di_output_json | json_query('tag_Project_' + project)}}"
      domain_nodes: "{{di_output_json | json_query('tag_Domain_' + domain)}}"
  run_once: true
  when: not (inventory_type is undefined or inventory_type == "static") and cloud == "aws"

# If we're running this command for to build a cluster in OpenStack, then use the
# `openstack` command to gather the dynamic inventory information that we need to
# build our application host groups
- block:
  - name: Run openstack command to gather inventory information
    local_action: "shell common-utils/inventory/osp/openstack"
    register: di_output
  - set_fact:
      di_output_json: "{{di_output.stdout | from_json}}"
  - set_fact:
      cloud_nodes: "{{(di_output_json | json_query('[\"meta-Cloud_' + cloud + '\"]')).0}}"
      tenant_nodes: "{{(di_output_json | json_query('[\"meta-Tenant_' + tenant + '\"]')).0}}"
      project_nodes: "{{(di_output_json | json_query('[\"meta-Project_' + project + '\"]')).0}}"
      domain_nodes: "{{(di_output_json | json_query('[\"meta-Domain_' + domain + '\"]')).0}}"
  run_once: true
  when: not (inventory_type is undefined or inventory_type == "static") and cloud == "osp"

# and loop through the host_group_types list, building each host group (in turn)
- include: ../files/build_host_groups.yml
  with_items: "{{host_group_list}}"
  loop_control:
    loop_var: host_group_item

# Otherwise, build the application host groups from the static inventory
# information that was passed in
- add_host:
    name: "{{item}}"
    groups: "zookeeper"
    ansible_ssh_host: "{{((((zookeeper_inventory | default({}))[item] | default({})).ansible_ssh_host) | default(item))}}"
    ansible_ssh_port: "{{((((zookeeper_inventory | default({}))[item] | default({})).ansible_ssh_port) | default(22))}}"
    ansible_ssh_user: "{{((((zookeeper_inventory | default({}))[item] | default({})).ansible_ssh_user) | default(ansible_user))}}"
    ansible_ssh_private_key_file: "{{((((zookeeper_inventory | default({}))[item] | default({})).ansible_ssh_private_key_file) | default(ansible_ssh_private_key_file))}}"
  with_items: "{{zookeeper_nodes | default([])}}"
  when: inventory_type == "static" and zookeeper_group is defined and zookeeper_group
  run_once: true

# And build the application-specific host group from the static inventory
# information that was passed in
- block:
  - set_fact:
      "{{app_list_as}}": "{{host_inventory}}"
    when: not (app_list_as is undefined or app_list_as is none or app_list_as | trim == '')
  - add_host:
      name: "{{item}}"
      groups: "{{application}}"
    with_items: "{{app_nodes}}"
  when: inventory_type == "static"
  run_once: true
